#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int dx[4] = { 0,0,-1,1 };
int dy[4] = { -1,1,0,0 };

int main() {
	int n, a,q,w;
	cin >> n;
	vector<int> tp(n + 1, 0);
	vector<vector<int>> input(n + 1, tp);
	vector<char> direction(10001, '0');
	vector<vector<int>> visited=input;
	cin >> a;
	for (int i = 0; i < a; i++) {
		cin >> q>> w;
		input[q][w] = 2;
	}
	cin >> a;
	char in;
	while (a--) {
		cin >> q >> in;
		direction[q] = in;
	}
	queue<pair<int, int>> snake;
	int x = 1, y = 1,dir=1,time=1;
	snake.push(pair<int, int>(x, y));
	visited[x][y] = 0;
	while (1) {
		int nx = x + dx[dir];
		int ny = y + dy[dir];
		if ((nx >= 1 && nx <= n && ny >= 1 && ny <= n) && visited[nx][ny] != 1) { //벽이랑 뱀이랑 둘 다 안만나면
			if (input[nx][ny] != 2) {
				visited[snake.front().first][snake.front().second] = 0;
				snake.pop();
			}
			input[nx][ny] = 0;
			visited[nx][ny] = 1;
			snake.push(pair<int, int>(nx, ny));
			x = nx; y = ny;
		}
		else { //만나면
			break;
		}
		if (time <= 10000) {
			switch (direction[time])
			{
			case 'L':
				if (dir == 0) dir = 3;
				else if (dir == 1) dir = 2;
				else if (dir == 2) dir = 0;
				else if (dir == 3) dir = 1;
				break;
			case 'D':
				if (dir == 0) dir = 2;
				else if (dir == 1) dir = 3;
				else if (dir == 2) dir = 1;
				else if (dir == 3) dir = 0;
				break;
			default:
				break;
			}
		}
		time++;
	}
	cout << time << endl;
}
